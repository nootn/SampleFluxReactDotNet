// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
#pragma warning disable 1591, 3008, 3009, 0108
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace SampleFluxReactDotNet.Web.Controllers
{
    public partial class HomeController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected HomeController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddComment()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddComment);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddTodo()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddTodo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ToggleTodo()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleTodo);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ClearCompletedTodos()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClearCompletedTodos);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HomeController Actions { get { return MVC.Home; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Home";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Home";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Comments = "Comments";
            public readonly string AddComment = "AddComment";
            public readonly string Todos = "Todos";
            public readonly string AddTodo = "AddTodo";
            public readonly string ToggleTodo = "ToggleTodo";
            public readonly string ClearCompletedTodos = "ClearCompletedTodos";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Comments = "Comments";
            public const string AddComment = "AddComment";
            public const string Todos = "Todos";
            public const string AddTodo = "AddTodo";
            public const string ToggleTodo = "ToggleTodo";
            public const string ClearCompletedTodos = "ClearCompletedTodos";
        }


        static readonly ActionParamsClass_AddComment s_params_AddComment = new ActionParamsClass_AddComment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddComment AddCommentParams { get { return s_params_AddComment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddComment
        {
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_AddTodo s_params_AddTodo = new ActionParamsClass_AddTodo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddTodo AddTodoParams { get { return s_params_AddTodo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddTodo
        {
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_ToggleTodo s_params_ToggleTodo = new ActionParamsClass_ToggleTodo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ToggleTodo ToggleTodoParams { get { return s_params_ToggleTodo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ToggleTodo
        {
            public readonly string todoId = "todoId";
            public readonly string complete = "complete";
        }
        static readonly ActionParamsClass_ClearCompletedTodos s_params_ClearCompletedTodos = new ActionParamsClass_ClearCompletedTodos();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ClearCompletedTodos ClearCompletedTodosParams { get { return s_params_ClearCompletedTodos; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ClearCompletedTodos
        {
            public readonly string todoIds = "todoIds";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Views/Home/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_HomeController : SampleFluxReactDotNet.Web.Controllers.HomeController
    {
        public T4MVC_HomeController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CommentsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Comments()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Comments);
            CommentsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddCommentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddComment(string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            AddCommentOverride(callInfo, text);
            return callInfo;
        }

        [NonAction]
        partial void TodosOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Todos()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Todos);
            TodosOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddTodoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddTodo(string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddTodo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            AddTodoOverride(callInfo, text);
            return callInfo;
        }

        [NonAction]
        partial void ToggleTodoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string todoId, bool complete);

        [NonAction]
        public override System.Web.Mvc.ActionResult ToggleTodo(string todoId, bool complete)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ToggleTodo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "todoId", todoId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "complete", complete);
            ToggleTodoOverride(callInfo, todoId, complete);
            return callInfo;
        }

        [NonAction]
        partial void ClearCompletedTodosOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string todoIds);

        [NonAction]
        public override System.Web.Mvc.ActionResult ClearCompletedTodos(string todoIds)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClearCompletedTodos);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "todoIds", todoIds);
            ClearCompletedTodosOverride(callInfo, todoIds);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108
